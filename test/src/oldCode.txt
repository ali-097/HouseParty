import axios from "axios";
import { useEffect, useState } from "react";
import "./App.css";

const API = "http://localhost:8000/api/room/";

function App() {
	const [rooms, setRooms] = useState([]);
	const [showAddModal, setShowAddModal] = useState(false);
	const [showUpdateModal, setShowUpdateModal] = useState(false);
	const [code, setCode] = useState("");
	const [host, setHost] = useState("");
	const [guestCanPause, setGuestCanPause] = useState(true);
	const [votesToSkip, setVotesToSkip] = useState(3);
	const [selectedRoomId, setSelectedRoomId] = useState(null);

	const fetchData = async () => {
		try {
			const response = await axios.get(API);
			setRooms(response.data);
		} catch (error) {
			console.error("Error fetching data:", error);
		}
	};

	useEffect(() => {
		fetchData();
	}, []);

	const handleSubmit = async (event) => {
		event.preventDefault();

		try {
			await axios.post(API, {
				code,
				host,
				guest_can_pause: guestCanPause,
				votes_to_skip: votesToSkip,
				created_at: new Date().toISOString(),
			});
			fetchData();
			setCode("");
			setHost("");
			setGuestCanPause(true);
			setVotesToSkip(3);
			setShowAddModal(false);
		} catch (error) {
			console.error("Error sending data:", error);
		}
	};

	const handleUpdate = async (roomId) => {
		setSelectedRoomId(roomId);
		setShowUpdateModal(true);
	};

	const handleUpdateSubmit = async () => {
		try {
			await axios.put(`${API}${selectedRoomId}/`, {
				code,
				host,
				guest_can_pause: guestCanPause,
				votes_to_skip: votesToSkip,
			});
			fetchData();
			setShowUpdateModal(false);
		} catch (error) {
			console.error("Error updating room:", error);
		}
	};

	const handleDelete = async (roomId) => {
		try {
			await axios.delete(`${API}${roomId}/`);
			fetchData();
		} catch (error) {
			console.error("Error deleting room:", error);
		}
	};
	console.log(rooms);
	return (
		<div>
			<div
				style={{
					display: "flex",
					alignItems: "center",
					justifyContent: "center",
					gap: "20px",
					margin: "5px 0",
				}}
			>
				<h1>Add Room</h1>
				<button
					style={{ marginTop: 0 }}
					onClick={() => setShowAddModal(true)}
				>
					Add Room
				</button>
			</div>
			{showAddModal && (
				<div className='modal'>
					<div className='modal-content'>
						<form onSubmit={handleSubmit}>
							<label>
								Code:
								<input
									type='text'
									value={code}
									onChange={(e) => setCode(e.target.value)}
								/>
							</label>
							<br />
							<label>
								Host:
								<input
									type='text'
									value={host}
									onChange={(e) => setHost(e.target.value)}
								/>
							</label>
							<br />
							<label>
								Guest Can Pause:
								<input
									type='checkbox'
									checked={guestCanPause}
									onChange={() =>
										setGuestCanPause(!guestCanPause)
									}
								/>
							</label>
							<br />
							<label>
								Votes to Skip:
								<input
									type='number'
									value={votesToSkip}
									onChange={(e) =>
										setVotesToSkip(e.target.value)
									}
								/>
							</label>
							<br />
							<button type='submit'>Add Room</button>
							<button onClick={() => setShowAddModal(false)}>
								Cancel
							</button>
						</form>
					</div>
				</div>
			)}
			<h1 style={{ marginBottom: "10px" }}>Rooms</h1>
			<ul>
				{rooms.map((room) => (
					<li key={room.id}>
						<p>Code: {room.code}</p>
						<p>Host: {room.host}</p>
						<p>
							Guest Can Pause:{" "}
							{room.guest_can_pause ? "Yes" : "No"}
						</p>
						<p>Votes to Skip: {room.votes_to_skip}</p>
						<p>Created At: {room.created_at}</p>
						<button onClick={() => handleUpdate(room.id)}>
							Update
						</button>
						<button onClick={() => handleDelete(room.id)}>
							Delete
						</button>
					</li>
				))}
			</ul>
			{showUpdateModal && (
				<div className='modal'>
					<div className='modal-content'>
						<form onSubmit={handleUpdateSubmit}>
							<label>Code:</label>
							<input
								type='text'
								value={code}
								onChange={(e) => setCode(e.target.value)}
							/>
							<label>
								Host:
								<input
									type='text'
									value={host}
									onChange={(e) => setHost(e.target.value)}
								/>
							</label>
							<br />
							<label>
								Guest Can Pause:
								<input
									type='checkbox'
									checked={guestCanPause}
									onChange={() =>
										setGuestCanPause(!guestCanPause)
									}
								/>
							</label>
							<br />
							<label>
								Votes to Skip:
								<input
									type='number'
									value={votesToSkip}
									onChange={(e) =>
										setVotesToSkip(e.target.value)
									}
								/>
							</label>
							<br />
							<button type='submit'>Update Room</button>
							<button onClick={() => setShowUpdateModal(false)}>
								Cancel
							</button>
						</form>
					</div>
				</div>
			)}
			<br />
		</div>
	);
}

export default App;
